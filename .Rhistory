theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
df_en <- df %>%
filter(Language == "en")
dim(df_en)
# Prepared data for proportional sampling. Extract Date Posted into the format as Year-Month for sampling.
df_en <- df_en %>%
mutate(
date_posted = parse_date_time(`Date Posted`,
# "mdy" -> for 08-24-24
# "d-b-y" -> for 18-Aug-24
# "d-B-y" -> for 18-August-24
orders = c("mdy", "d-b-y", "d-B-y")),
year_month = format(date_posted, "%Y-%m")
)
# Prepare data set for the plot, due to it is group by month
df_monthly <- df_en %>%
filter(!is.na(year_month)) %>%
group_by(year_month) %>%
summarise(count = n()) %>%
arrange(year_month) %>%
mutate(date = as.Date(paste0(year_month, "-01")))
# Prepare data set for key patch
key_time <- data.frame(
x = as.Date(c("2020-12-01", "2021-11-01", "2022-09-01", "2023-09-01")),
y = rep(max(df_monthly$count) * 0.95, 4),
label = c("Patch 1.0", "Patch 1.3", "Patch 1.6", "Patch 2.0")
)
# Visualize the distribution of comments and mark the key patch
ggplot(df_monthly, aes(x = date, y = count)) +
geom_line(color = met.brewer("Monet")[2], size = 1) +
geom_point(color = met.brewer("Monet")[1], size = 1.5, shape = 0) +
geom_vline(data = key_time, aes(xintercept = x),
linetype = "dashed", color = met.brewer("Monet")[1], alpha = 0.6) +
geom_text(data = key_time,
aes(x = x, y = y, label = label),
vjust = -0.5, hjust = -0.1,
color = met.brewer("Monet")[1], size = 3.5) +
labs(title = "Review amount and key patch",
x = "",
y = "") +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months") +
theme_bw(base_size = 13) +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
monthly_rating <- df_en %>%
group_by(year_month, Rating) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(year_month) %>%
mutate(total = sum(count),
proportion = count / total) %>%
filter(Rating == "Recommended")
ggplot(monthly_rating, aes(x = as.Date(paste0(year_month, "-01")), y = proportion)) +
geom_line(color = met.brewer("Monet")[2], size = 1) +
geom_point(color = met.brewer("Monet")[1], size = 1.5, shape = 0) +
geom_vline(data = key_time, aes(xintercept = x),
linetype = "dashed", color = met.brewer("Monet")[1], alpha = 0.6) +
scale_x_date(date_labels = "%Y-%m", date_breaks = "3 months") +
geom_smooth(color = met.brewer("Monet")[8], fill = met.brewer("Monet")[9], alpha = 0.2) +
labs(title = "Proportion of Recommended Reviews Over Time",
x = "Month",
y = "Recommended Rate") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Proportional sampling
df_sam <- df_en %>%
group_by(year_month) %>%
mutate(group_n = n()) %>%
sample_frac(0.05) %>% # sample rate, for every group keep 5%
ungroup()
dim(df_sam)
# Prepare the stopwords library
stopwords <- c(stopwords("en"), "game", "games", "can", "yes")
# Function to text data tidy
review_tidy <- function(text) {
text <- tolower(text)                 # Change to lower writing style
text <- gsub("[[:punct:]]", "", text) # Delete character like !@
text <- gsub("\\s+", " ", text)       # Delete extra space
text <- trimws(text)                  # Delete extra lines
text <- gsub("[0-9]+", "", text)      # Drop numbers
words <- unlist(strsplit(text, "\\s+"))
cleaned <- words[!tolower(words) %in% stopwords]
return(paste(cleaned, collapse = " "))
}
# Data tidy
df_sam <- df_sam %>%
mutate(Review = sapply(Review, review_tidy))
word_freq <- df_sam %>%
select(Review) %>%
unnest_tokens(word, Review) %>%
filter(!word %in% stopwords) %>%
count(word, sort = TRUE)
head(word_freq)
top_words_bar <- word_freq %>%
slice_max(n, n = 10)
top_words_cloud <- word_freq %>%
slice_max(n, n = 200)
ggplot(top_words_bar, aes(x = reorder(word, n), y = n)) +
geom_col(fill = met.brewer("Monet")[1], color = "black") +
coord_flip() +
labs(title = "Top 10 Most Frequent Words in English Reviews",
x = "Word",
y = "Frequency") +
theme_bw()
# Build a corpus
crop <- corpus(df_sam, text_field = "Review")
# Import the group by variable
docvars(crops, "Rating") <- df_sam$Rating
# Build dfm matrix and group by rating
dfm_grouped <- dfm(corp,
remove_punct = TRUE,
remove_numbers = TRUE) %>%
dfm_tolower() %>%
dfm_remove(stopwords("en")) %>%
dfm_group(groups = Rating)
# Calculate keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(logratio), n = 20)
ggplot(top_key, aes(x = reorder(feature, logratio), y = logratio, fill = logratio > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness: Words Distinguishing Recommended vs Not Recommended Reviews",
x = "Word", y = "Log-Likelihood Ratio (Keyness)") +
scale_fill_manual(values = c("TRUE" = "#4CAF50", "FALSE" = "#F44336")) +
theme_minimal(base_size = 13)
ggplot(top_words_cloud, aes(label = word, size = n, color = n)) +
geom_text_wordcloud(area_corr = TRUE, shape = "square") +
scale_size_area(max_size = 15) +
scale_color_gradient(low = met.brewer("VanGogh3")[3],
high = met.brewer("VanGogh3")[7]) +
theme_bw() +
labs(title = "Word Cloud of English Reviews")
# Build a corpus
crop <- corpus(df_sam, text_field = "Review")
# Import the group by variable
docvars(crops, "Rating") <- df_sam$Rating
# Build dfm matrix and group by rating
dfm_grouped <- dfm(corp,
remove_punct = TRUE,
remove_numbers = TRUE) %>%
dfm_tolower() %>%
dfm_remove(stopwords("en")) %>%
dfm_group(groups = Rating)
# Calculate keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(logratio), n = 20)
ggplot(top_key, aes(x = reorder(feature, logratio), y = logratio, fill = logratio > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness: Words Distinguishing Recommended vs Not Recommended Reviews",
x = "Word", y = "Log-Likelihood Ratio (Keyness)") +
scale_fill_manual(values = c("TRUE" = "#4CAF50", "FALSE" = "#F44336")) +
theme_minimal(base_size = 13)
# Build a corpus
crop <- corpus(df_sam, text_field = "Review")
# Import the group by variable
docvars(crop, "Rating") <- df_sam$Rating
# Build dfm matrix and group by rating
dfm_grouped <- dfm(corp,
remove_punct = TRUE,
remove_numbers = TRUE) %>%
dfm_tolower() %>%
dfm_remove(stopwords("en")) %>%
dfm_group(groups = Rating)
# Calculate keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(logratio), n = 20)
ggplot(top_key, aes(x = reorder(feature, logratio), y = logratio, fill = logratio > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness: Words Distinguishing Recommended vs Not Recommended Reviews",
x = "Word", y = "Log-Likelihood Ratio (Keyness)") +
scale_fill_manual(values = c("TRUE" = "#4CAF50", "FALSE" = "#F44336")) +
theme_minimal(base_size = 13)
# Build a corpus
crop <- corpus(df_sam, text_field = "Review")
# Import the group by variable
docvars(crop, "Rating") <- df_sam$Rating
# Build dfm matrix and group by rating
dfm_grouped <- dfm(corp,
remove_punct = TRUE,
remove_numbers = TRUE) %>%
dfm_tolower() %>%
dfm_remove(stopwords("en")) %>%
dfm_group(groups = Rating)
# Calculate keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(logratio), n = 20)
ggplot(top_key, aes(x = reorder(feature, logratio), y = logratio, fill = logratio > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness: Words Distinguishing Recommended vs Not Recommended Reviews",
x = "Word", y = "Log-Likelihood Ratio (Keyness)") +
scale_fill_manual(values = c("TRUE" = "#4CAF50", "FALSE" = "#F44336")) +
theme_minimal(base_size = 13)
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
# Import the group by variable
docvars(corp, "Rating") <- df_sam$Rating
# Build dfm matrix and group by rating
dfm_grouped <- dfm(corp,
remove_punct = TRUE,
remove_numbers = TRUE) %>%
dfm_tolower() %>%
dfm_remove(stopwords("en")) %>%
dfm_group(groups = Rating)
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
docvars(corp, "Rating") <- df_sam$Rating
# Tokenization
toks <- tokens(corp, remove_punct = TRUE, remove_numbers = TRUE)
toks <- tokens_tolower(toks)
toks <- tokens_remove(toks, stopwords("en"))
# Build dfm and grouped by rating
dfm_grouped <- dfm(toks) %>%
dfm_group(groups = docvars(corp, "Rating"))
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended"
top_key <- keyness_result %>%
slice_max(abs(logratio), n = 20)
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
docvars(corp, "Rating") <- df_sam$Rating
# Tokenization
toks <- tokens(corp, remove_punct = TRUE, remove_numbers = TRUE)
toks <- tokens_tolower(toks)
toks <- tokens_remove(toks, stopwords("en"))
# Build dfm and grouped by rating
dfm_grouped <- dfm(toks) %>%
dfm_group(groups = docvars(corp, "Rating"))
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended"
top_key <- keyness_result %>%
slice_max(abs(loglikelihood), n = 20)
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
docvars(corp, "Rating") <- df_sam$Rating
# Tokenization
toks <- tokens(corp, remove_punct = TRUE, remove_numbers = TRUE)
toks <- tokens_tolower(toks)
toks <- tokens_remove(toks, stopwords("en"))
# Build dfm and grouped by rating
dfm_grouped <- dfm(toks) %>%
dfm_group(groups = docvars(corp, "Rating"))
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(loglikelihood), n = 20)
top_key <- keyness_result %>%
slice_max(abs(loglikelihood), n = 20) %>%
mutate(word = reorder(feature, loglikelihood))
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
docvars(corp, "Rating") <- df_sam$Rating
# Tokenization
toks <- tokens(corp, remove_punct = TRUE, remove_numbers = TRUE)
toks <- tokens_tolower(toks)
toks <- tokens_remove(toks, stopwords("en"))
# Build dfm and grouped by rating
dfm_grouped <- dfm(toks) %>%
dfm_group(groups = docvars(corp, "Rating"))
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(loglikelihood), n = 20) %>%
mutate(word = reorder(feature, loglikelihood))
top_key <- keyness_result %>%
slice_max(abs(stat), n = 20) %>%
mutate(word = reorder(feature, loglikelihood))
top_key <- keyness_result %>%
slice_max(abs(stat), n = 20) %>%
mutate(word = reorder(feature, stat))
str(keyness_result)
top_key <- keyness_result %>%
slice_max(abs(chi2), n = 20) %>%
mutate(word = reorder(feature, chi2))
ggplot(top_key, aes(x = word, y = loglikelihood, fill = loglikelihood > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Log-likelihood") +
scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
theme_minimal(base_size = 13)
ggplot(top_key, aes(x = word, y = chi2, fill = loglikelihood > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Log-likelihood") +
scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
theme_minimal(base_size = 13)
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Log-likelihood") +
scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
theme_minimal(base_size = 13)
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Log-likelihood") +
scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
theme_bw()
top_key <- keyness_result %>%
slice_max(abs(chi2), n = 10) %>%
mutate(word = reorder(feature, chi2))
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
docvars(corp, "Rating") <- df_sam$Rating
# Tokenization
toks <- tokens(corp, remove_punct = TRUE, remove_numbers = TRUE)
toks <- tokens_tolower(toks)
toks <- tokens_remove(toks, stopwords("en"))
# Build dfm and grouped by rating
dfm_grouped <- dfm(toks) %>%
dfm_group(groups = docvars(corp, "Rating"))
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(chi2), n = 10) %>%
mutate(word = reorder(feature, chi2))
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Log-likelihood") +
scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
theme_bw()
top_key <- keyness_result %>%
slice_max(abs(chi2), n = 15) %>%
mutate(word = reorder(feature, chi2))
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
docvars(corp, "Rating") <- df_sam$Rating
# Tokenization
toks <- tokens(corp, remove_punct = TRUE, remove_numbers = TRUE)
toks <- tokens_tolower(toks)
toks <- tokens_remove(toks, stopwords("en"))
# Build dfm and grouped by rating
dfm_grouped <- dfm(toks) %>%
dfm_group(groups = docvars(corp, "Rating"))
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(chi2), n = 15) %>%
mutate(word = reorder(feature, chi2))
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Log-likelihood") +
scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
theme_bw()
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
theme_bw()
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = "forestgreen", "FALSE" = "firebrick")) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = met.brewer("Monet")[1],
"FALSE" = met.brewer("Monet")[6])) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = met.brewer("Cassatt1")[8],
"FALSE" = met.brewer("Cassatt1")[1])) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
docvars(corp, "Rating") <- df_sam$Rating
# Tokenization
toks <- tokens(corp, remove_punct = TRUE, remove_numbers = TRUE)
toks <- tokens_tolower(toks)
toks <- tokens_remove(toks, stopwords("en"))
# Build dfm and grouped by rating
dfm_grouped <- dfm(toks) %>%
dfm_group(groups = docvars(corp, "Rating"))
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(chi2), n = 18) %>%
mutate(word = reorder(feature, chi2))
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = met.brewer("Cassatt1")[8],
"FALSE" = met.brewer("Cassatt1")[1])) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = met.brewer("Cassatt1")[8],
"FALSE" = met.brewer("Cassatt1")[1])) +
theme_bw()
# Build a corpus
corp <- corpus(df_sam, text_field = "Review")
docvars(corp, "Rating") <- df_sam$Rating
# Tokenization
toks <- tokens(corp, remove_punct = TRUE, remove_numbers = TRUE)
toks <- tokens_tolower(toks)
toks <- tokens_remove(toks, stopwords("en"))
# Build dfm and grouped by rating
dfm_grouped <- dfm(toks) %>%
dfm_group(groups = docvars(corp, "Rating"))
# Keyness
keyness_result <- textstat_keyness(dfm_grouped, target = "Recommended")
top_key <- keyness_result %>%
slice_max(abs(chi2), n = 15) %>%
mutate(word = reorder(feature, chi2))
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating Group",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = met.brewer("Cassatt1")[8],
"FALSE" = met.brewer("Cassatt1")[1])) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE, color = "black") +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = met.brewer("Cassatt1")[8],
"FALSE" = met.brewer("Cassatt1")[1])) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(top_key, aes(x = word, y = chi2, fill = chi2 > 0)) +
geom_col(show.legend = FALSE) +
coord_flip() +
labs(title = "Keyness Analysis of Words by Rating",
subtitle = "Positive values → more associated with 'Recommended'",
x = "Word",
y = "Chi2") +
scale_fill_manual(values = c("TRUE" = met.brewer("Cassatt1")[8],
"FALSE" = met.brewer("Cassatt1")[1])) +
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggplot(top_words_cloud, aes(label = word, size = n, color = n)) +
geom_text_wordcloud(area_corr = TRUE, shape = "square") +
scale_size_area(max_size = 15) +
scale_color_gradient(low = met.brewer("VanGogh3")[3],
high = met.brewer("VanGogh3")[7]) +
theme_bw() +
labs(title = "Word Cloud of English Reviews")
